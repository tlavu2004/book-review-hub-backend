# application-prod.properties (profile: production)
# This file contains production-specific overrides for security, performance, and reliability
# Active profile should be set via runtime argument: --spring.profiles.active=prod
# NEVER commit sensitive production values to version control

# =======================================
# == Flyway Configuration (Production) ==
# =======================================

# Enable Flyway for production database schema versioning
# Essential for maintaining consistent schema across deployments
spring.flyway.enabled=true

# CRITICAL: Disable Flyway clean command in production
# Prevents accidental deletion of all database objects and data
spring.flyway.cleanDisabled=true

# Validate migrations before applying (recommended for production safety)
# Ensures migration scripts haven't been tampered with
spring.flyway.validate-on-migrate=true

# Fail fast if validation errors occur
# Prevents deployment with inconsistent migration state
spring.flyway.validate-migration-naming=true

# Set migration timeout for large schema changes (in seconds)
# Prevents hanging deployments due to long-running migrations
spring.flyway.lock-retry-count=50

# ================================================
# == JPA & Hibernate Configuration (Production) ==
# ================================================

# CRITICAL: Only validate schema, never auto-modify in production
# Prevents accidental schema changes that could cause data loss
spring.jpa.hibernate.ddl-auto=validate

# Disable SQL query logging for security and performance
# Prevents sensitive data from appearing in logs and reduces log volume
spring.jpa.show-sql=false

# Disable SQL formatting to reduce log processing overhead
spring.jpa.properties.hibernate.format_sql=false

# Disable SQL comments to reduce log size
spring.jpa.properties.hibernate.use_sql_comments=false

# Disable Hibernate statistics collection (performance optimization)
# Reduces memory usage and processing overhead in production
spring.jpa.properties.hibernate.generate_statistics=false

# Enable second-level cache for better performance (if using cache provider)
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true

# Optimize batch processing for production workloads
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ========================================
# == Logging Configuration (Production) ==
# ========================================

# Set conservative logging levels for production
# Reduces log volume and prevents sensitive information leakage
logging.level.root=WARN

# Application-specific logging (adjust package name to match your project)
# Keep at INFO level to capture important business events
logging.level.com.bookreviewhub=INFO

# Disable verbose framework logging
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN
logging.level.com.zaxxer.hikari=WARN

# Security logging should remain at INFO to capture security events
logging.level.org.springframework.security=INFO

# Critical: Never log SQL parameters in production (security risk)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# =========================================
# == Security Configuration (Production) ==
# =========================================

# Disable error details in HTTP responses (security hardening)
# Prevents information disclosure through error messages
server.error.include-stacktrace=never
server.error.include-message=never
server.error.include-binding-errors=never

# Hide server information in HTTP headers
server.error.whitelabel.enabled=false

# =============================================
# == Jackson JSON Configuration (Production) ==
# =============================================

# Disable JSON pretty-printing for smaller response sizes
# Reduces bandwidth usage and improves performance
spring.jackson.serialization.indent-output=false

# Optimize JSON processing for production
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.generator.ignore-unknown=true

# =========================================
# == Actuator Configuration (Production) ==
# =========================================

# Expose only essential endpoints in production
# Minimizes attack surface while maintaining monitoring capabilities
management.endpoints.web.exposure.include=health,info,metrics

# Restrict health details to authorized users only
# Prevents information disclosure to unauthorized users
management.endpoint.health.show-details=when-authorized

# Disable environment info endpoint (may contain sensitive data)
management.info.env.enabled=false

# Configure health check groups for load balancers
management.endpoint.health.group.liveness.include=ping,diskSpace
management.endpoint.health.group.readiness.include=db,flyway

# Set custom management port for internal monitoring (optional)
# management.server.port=8081

# ===============================================
# == Connection Pool Optimization (Production) ==
# ===============================================

# Optimize connection pool for production load
spring.datasource.hikari.maximum-pool-size=30
spring.datasource.hikari.minimum-idle=10
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# ============================================
# == Performance Configuration (Production) ==
# ============================================

# Enable HTTP response compression for better performance
server.compression.enabled=true
server.compression.min-response-size=2048

# Set appropriate timeouts for production
server.connection-timeout=20000
server.keep-alive-timeout=15000

# ============================================
# == File Upload Configuration (Production) ==
# ============================================

# Conservative file upload limits for production
# Prevents server overload and storage abuse
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

# File upload location (should be externalized)
spring.servlet.multipart.location=${UPLOAD_TEMP_DIR:/tmp}

# ======================================
# == Cache Configuration (Production) ==
# ======================================

# Enable caching for production performance
spring.cache.type=simple

# Cache TTL settings (if using Redis or other cache providers)
# spring.cache.redis.time-to-live=600000

# ========================================
# == SSL/TLS Configuration (Production) ==
# ========================================

# Force HTTPS in production (if terminating SSL at application level)
# server.ssl.enabled=true
# server.ssl.key-store=${SSL_KEYSTORE_PATH}
# server.ssl.key-store-password=${SSL_KEYSTORE_PASSWORD}
# server.ssl.key-store-type=PKCS12

# Redirect HTTP to HTTPS
# server.require-ssl=true

# =============================================
# == Monitoring & Observability (Production) ==
# =============================================

# Enable JMX for production monitoring
spring.jmx.enabled=true

# Configure metrics export (uncomment if using monitoring systems)
# management.metrics.export.prometheus.enabled=true
# management.metrics.export.cloudwatch.enabled=true

# ====================================
# == Graceful Shutdown (Production) ==
# ====================================

# Enable graceful shutdown for zero-downtime deployments
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# ==========================
# == Production Hardening ==
# ==========================

# Disable unnecessary features for security
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# Configure session timeout (if using sessions)
server.servlet.session.timeout=30m
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true

# ==========================
# == Production Checklist ==
# ==========================

# BEFORE DEPLOYING TO PRODUCTION, ENSURE:
# 01. All sensitive values are externalized to environment variables
# 02. Database credentials are secure and rotated regularly
# 03. JWT secrets are strong and environment-specific
# 04. CORS origins are restrictively configured
# 05. SSL/TLS certificates are valid and properly configured
# 06. Log levels don't expose sensitive information
# 07. File upload limits are appropriate for your use case
# 08. Database connection pool is sized for expected load
# 09. Monitoring and alerting are configured
# 10. Backup and disaster recovery procedures are in place
# 11. Security headers are configured (consider Spring Security)
# 12. Rate limiting is implemented for public APIs
# 13. Regular security updates are scheduled