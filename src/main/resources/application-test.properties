# application-test.properties (profile: test)
# Configuration for automated testing (Unit tests, Integration tests, CI/CD)
# Optimized for fast execution, isolation, and reproducible test results
# Active profile is typically set by test framework: @ActiveProfiles("test")

# =====================================================================================
# == Database Configuration (Test) ==
# =====================================================================================

# In-memory H2 database for fast, isolated tests
# Data is completely reset between test runs ensuring test isolation
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MySQL;DATABASE_TO_LOWER=TRUE;DEFAULT_NULL_ORDERING=HIGH
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# Use H2 dialect for compatibility
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Enable H2 console for debugging tests (accessible at /h2-console)
# Useful when debugging failing integration tests
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# =====================================================================================
# == JPA & Hibernate Configuration (Test) ==
# =====================================================================================

# Create and drop schema for each test run (ensures clean state)
# Provides complete isolation between test runs
spring.jpa.hibernate.ddl-auto=create-drop

# Disable SQL logging for faster test execution
# Enable only when debugging specific test failures
spring.jpa.show-sql=false

# Disable SQL formatting to reduce test output noise
spring.jpa.properties.hibernate.format_sql=false

# Disable SQL comments for cleaner test logs
spring.jpa.properties.hibernate.use_sql_comments=false

# Disable Hibernate statistics for faster test execution
spring.jpa.properties.hibernate.generate_statistics=false

# Disable Open Session in View (same as other environments)
spring.jpa.open-in-view=false

# Enable batch processing for bulk test data setup
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Use modern ID generator for consistent test behavior
spring.jpa.hibernate.use-new-id-generator-mappings=true

# =====================================================================================
# == Flyway Configuration (Test) ==
# =====================================================================================

# Disable Flyway in tests - we use create-drop instead
# Schema is created from JPA entities for faster test execution
spring.flyway.enabled=false

# If you need to test Flyway migrations specifically, create separate test class with:
# @TestPropertySource(properties = "spring.flyway.enabled=true")
# @Sql(scripts = "classpath:db/migration/test-data.sql")

# =====================================================================================
# == Logging Configuration (Test) ==
# =====================================================================================

# Minimal logging for fast test execution
logging.level.root=WARN

# Application logging at INFO level to catch important test events
# Adjust package name to match your project
logging.level.com.bookreviewhub=INFO

# Suppress verbose framework logging during tests
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN
logging.level.com.zaxxer.hikari=WARN

# Suppress SQL logging (enable for debugging specific tests)
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Security logging for authentication tests
logging.level.org.springframework.security=WARN

# Test framework logging
logging.level.org.springframework.test=INFO
logging.level.org.testcontainers=INFO

# =====================================================================================
# == Connection Pool Configuration (Test) ==
# =====================================================================================

# Minimal connection pool for test performance
# Tests typically don't need many concurrent connections
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=5000
spring.datasource.hikari.idle-timeout=60000
spring.datasource.hikari.max-lifetime=300000

# Disable leak detection for faster test execution
spring.datasource.hikari.leak-detection-threshold=0

# =====================================================================================
# == Jackson JSON Configuration (Test) ==
# =====================================================================================

# Consistent JSON formatting for test assertions
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.indent-output=false

# Lenient JSON parsing for test flexibility
spring.jackson.deserialization.fail-on-unknown-properties=false
spring.jackson.serialization.fail-on-empty-beans=false

# Standard date format for predictable test assertions
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ
spring.jackson.time-zone=UTC

# =====================================================================================
# == Security Configuration (Test) ==
# =====================================================================================

# Simplified error handling for test assertions
server.error.include-stacktrace=always
server.error.include-message=always
server.error.include-binding-errors=always

# =====================================================================================
# == Cache Configuration (Test) ==
# =====================================================================================

# Disable caching in tests for predictable behavior
# Prevents cached data from affecting test results
spring.cache.type=none

# =====================================================================================
# == File Upload Configuration (Test) ==
# =====================================================================================

# Small file upload limits for test performance
spring.servlet.multipart.max-file-size=1MB
spring.servlet.multipart.max-request-size=1MB

# Use temp directory for test file uploads
spring.servlet.multipart.location=${java.io.tmpdir}/test-uploads

# Enable multipart for testing file upload endpoints
spring.servlet.multipart.enabled=true

# =====================================================================================
# == Actuator Configuration (Test) ==
# =====================================================================================

# Expose all endpoints for comprehensive testing
# Test monitoring and health check functionality
management.endpoints.web.exposure.include=*

# Always show health details in tests
management.endpoint.health.show-details=always

# Enable info endpoint for configuration testing
management.info.env.enabled=true

# Disable security for actuator endpoints in tests
management.security.enabled=false

# =====================================================================================
# == Application-Specific Test Configuration ==
# =====================================================================================

# JWT configuration for authentication tests
# Use fixed values for predictable test behavior
app.jwt.secret=dGVzdC1zZWNyZXQtZm9yLXVuaXQtdGVzdHMtb25seS1ub3QtZm9yLXByb2R1Y3Rpb24=
app.jwt.expiration=3600000
app.jwt.refresh-expiration=7200000
app.jwt.issuer=bookreviewhub-test

# CORS configuration for integration tests
app.cors.allowed-origins=http://localhost:3000,http://localhost:8080
app.cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true

# Test-specific Cloudinary configuration (mock/disabled)
app.cloudinary.cloud-name=test-cloud
app.cloudinary.api-key=test-key
app.cloudinary.api-secret=test-secret
app.cloudinary.environment=test

# Avatar configuration for file upload tests
app.cloudinary.avatar.max-file-size=1048576
app.cloudinary.avatar.allowed-formats=jpg,png

# =====================================================================================
# == Mock Configuration (Test) ==
# =====================================================================================

# Email service configuration (use mock in tests)
spring.mail.host=localhost
spring.mail.port=2525
spring.mail.username=test
spring.mail.password=test
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false

# =====================================================================================
# == Test Performance Configuration ==
# =====================================================================================

# Disable unnecessary features for faster test execution
spring.devtools.restart.enabled=false
spring.devtools.livereload.enabled=false

# JMX disabled in tests (not needed)
spring.jmx.enabled=false

# Disable banner for cleaner test output
spring.main.banner-mode=off

# =====================================================================================
# == Transaction Configuration (Test) ==
# =====================================================================================

# Default transaction timeout for tests (shorter than production)
spring.transaction.default-timeout=10

# =====================================================================================
# == Test Data Configuration ==
# =====================================================================================

# SQL initialization for test data (if needed)
# spring.sql.init.mode=embedded
# spring.sql.init.data-locations=classpath:test-data.sql
# spring.sql.init.schema-locations=classpath:test-schema.sql

# Defer DataSource initialization for TestContainers compatibility
spring.sql.init.mode=never

# =====================================================================================
# == Integration Test Support ==
# =====================================================================================

# TestContainers configuration (if using TestContainers for integration tests)
# These properties help with TestContainers database testing
# testcontainers.reuse.enable=true

# Random server port for parallel test execution
server.port=0

# =====================================================================================
# == Test Profiles and Annotations Usage ==
# =====================================================================================

# COMMON TEST ANNOTATIONS:
#
# @ActiveProfiles("test")
# - Activates this test profile
#
# @TestPropertySource(properties = {
#     "spring.jpa.show-sql=true",
#     "logging.level.org.hibernate.SQL=DEBUG"
# })
# - Override specific properties for debugging
#
# @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
# - Use custom database configuration instead of embedded
#
# @Testcontainers
# @Container
# static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0")
# - Use TestContainers for integration testing with real databases
#
# @MockBean
# - Mock Spring beans for unit testing
#
# @SpyBean
# - Spy on Spring beans for partial mocking

# =====================================================================================
# == Test Categories ==
# =====================================================================================

# UNIT TESTS:
# - Use @WebMvcTest, @DataJpaTest, @JsonTest
# - Mock external dependencies
# - Focus on single component testing
#
# INTEGRATION TESTS:
# - Use @SpringBootTest
# - Test component interactions
# - May use TestContainers for real database testing
#
# CONTRACT TESTS:
# - Test API contracts
# - Use @AutoConfigureWebTestClient
#
# SECURITY TESTS:
# - Use @WithMockUser, @WithUserDetails
# - Test authentication and authorization

# =====================================================================================
# == Testing Best Practices ==
# =====================================================================================

# TEST ISOLATION:
# 1. Each test should be independent and repeatable
# 2. Use @Transactional with @Rollback for database tests
# 3. Clean up test data or use create-drop schema
#
# PERFORMANCE:
# 1. Use @MockBean instead of real services when possible
# 2. Minimize @SpringBootTest usage (slower than slice tests)
# 3. Use TestContainers sparingly (slower startup)
#
# MAINTAINABILITY:
# 1. Use test profiles for different test scenarios
# 2. Create reusable test configurations
# 3. Use meaningful test data that reflects real scenarios