# application-dev.properties (profile: development)
# This file contains development-specific overrides for the shared application.properties
# Active profile should be set via command line: --spring.profiles.active=dev

# ========================================
# == Flyway Configuration (Development) ==
# ========================================

# Enable Flyway for database schema versioning in development
# Ensures consistent database schema across team members
spring.flyway.enabled=true

# Allow Flyway clean command in development (DANGEROUS - drops all database objects)
# Should NEVER be true in production environments
# Use with extreme caution: flyway:clean will DELETE ALL your data
spring.flyway.cleanDisabled=false

# Create baseline for existing databases without Flyway history
# Useful when introducing Flyway to an existing project
spring.flyway.baseline-on-migrate=true

# Skip default callbacks for faster migration in development
# Can be enabled if you need migration callbacks
spring.flyway.skip-default-callbacks=false

# =================================================
# == JPA & Hibernate Configuration (Development) ==
# =================================================

# Schema validation: Ensures database schema matches entity mappings
# 'validate' is safer than 'update' - prevents accidental schema changes
# Use 'create-drop' only for temporary testing with disposable data
spring.jpa.hibernate.ddl-auto=validate

# Show SQL queries in console for debugging and learning
# Helps developers understand what queries are being generated
spring.jpa.show-sql=true

# Format SQL output for better readability during development
# Makes it easier to understand complex queries
spring.jpa.properties.hibernate.format_sql=true

# Show SQL comments in output (helps identify which method generated the query)
# Useful for tracking query sources in complex applications
spring.jpa.properties.hibernate.use_sql_comments=true

# Enable Hibernate statistics for performance monitoring in development
# Provides insights into query performance and caching effectiveness
spring.jpa.properties.hibernate.generate_statistics=true

# Log slow queries (queries taking longer than 2 seconds)
# Helps identify performance bottlenecks early in development
spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=2000

# =========================================
# == Logging Configuration (Development) ==
# =========================================

# Set root logging level to INFO for development (more verbose than production)
logging.level.root=INFO

# Show detailed SQL queries and parameters for debugging
# Helps understand exactly what data is being sent to the database
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Show Spring Security debug information (useful for auth troubleshooting)
# Helps debug authentication and authorization issues
logging.level.org.springframework.security=DEBUG

# Show transaction boundaries (helpful for understanding transaction scope)
logging.level.org.springframework.transaction=DEBUG

# Application-specific logging (adjust package name to match your project)
logging.level.com.bookreviewhub=DEBUG

# Web request logging (shows incoming HTTP requests)
logging.level.org.springframework.web=DEBUG

# Show HikariCP connection pool activity
logging.level.com.zaxxer.hikari=DEBUG

# ==============================================
# == Jackson JSON Configuration (Development) ==
# ==============================================

# Pretty-print JSON responses for easier debugging and testing
# Makes API responses human-readable during development
spring.jackson.serialization.indent-output=true

# Include stack traces in error responses for better debugging
# Should be disabled in production for security reasons
server.error.include-stacktrace=always

# Include error details in responses
server.error.include-message=always

# ==========================================
# == Actuator Configuration (Development) ==
# ==========================================

# Expose more endpoints for development monitoring and debugging
# Includes useful endpoints for development but should be restricted in production
management.endpoints.web.exposure.include=health,info,metrics,env,configprops,beans,mappings,flyway

# Always show detailed health information in development
# Helps quickly identify what services are down or misconfigured
management.endpoint.health.show-details=always

# Show configuration properties (useful for debugging configuration issues)
management.endpoint.configprops.show-values=always

# =====================================
# == Development Tools Configuration ==
# =====================================

# Enable development tools for hot reloading (if spring-boot-devtools is included)
# Automatically restarts application when classes change
spring.devtools.restart.enabled=true

# Additional paths to watch for changes (if using devtools)
spring.devtools.restart.additional-paths=src/main/resources

# Exclude certain paths from restart triggers
spring.devtools.restart.exclude=static/**,public/**

# =======================================
# == Cache Configuration (Development) ==
# =======================================

# Disable caching in development to see immediate changes
# Prevents cached data from masking development changes
spring.cache.type=none

# =========================================
# == Alternative Database Configurations ==
# =========================================

# Option 1: In-memory H2 database for quick testing (no persistence)
# Uncomment these lines to use H2 instead of MySQL for rapid prototyping
# Data is lost when application stops - good for unit testing
#spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# Option 2: File-based H2 database (persists data between restarts)
# Uncomment these lines for persistent H2 database during development
# Useful when you want to keep test data between application restarts
#spring.datasource.url=jdbc:h2:file:./data/devdb;AUTO_SERVER=TRUE;DB_CLOSE_DELAY=-1
#spring.datasource.driver-class-name=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# Option 3: Use different MySQL database for development
# Uncomment and modify these lines to use a separate dev database
# Keeps development and production data completely separate
#spring.datasource.url=jdbc:mysql://localhost:3306/bookreviewhub_dev?ssl-mode=DISABLED&serverTimezone=UTC&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.username=dev_user
#spring.datasource.password=dev_password

# =========================================
# == Performance Profiling (Development) ==
# =========================================

# Enable JMX for monitoring (useful with profiling tools)
spring.jmx.enabled=true

# Enable Spring Boot metrics
management.metrics.enable.all=true

# ======================================
# == CORS Configuration (Development) ==
# ======================================

# Allow all origins in development (never use in production)
# Enables testing from any frontend development server
#app.cors.allowed-origins=*

# ===============================
# == File Upload (Development) ==
# ===============================

# Increase file upload limits for development testing
# Allows testing with larger files during development
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# =======================
# == Development Notes ==
# =======================

# REMEMBER TO:
# 1. Never commit sensitive data (passwords, API keys) to version control
# 2. Use environment variables or .env files for configuration
# 3. Test with production-like data sizes occasionally
# 4. Regularly run with 'prod' profile to catch configuration issues early
# 5. Monitor application performance even in development
