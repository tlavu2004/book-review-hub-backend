# application.properties (default shared config)

# Application Name
spring.application.name=bookreviewhub-backend

# ==============================================================================================
# == Shared Database Configuration (used in all profiles, values injected from env variables) ==
# ==============================================================================================

# Database connection URL with optimized parameters
# - ssl-mode: Controls SSL/TLS encryption (REQUIRED, PREFERRED, DISABLED)
# - serverTimezone: Database server timezone (should match your server)
# - useUnicode=true&characterEncoding=UTF-8: Proper Unicode support
# - allowPublicKeyRetrieval=false: Security setting for MySQL 8.0+
# - useSSL=true: Enable SSL connection (recommended for production)
spring.datasource.url=jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_NAME}?ssl-mode=${DB_SSL_MODE}&serverTimezone=${DB_SERVER_TIMEZONE}&useUnicode=true&characterEncoding=UTF-8&allowPublicKeyRetrieval=false&useSSL=true

# Database authentication credentials (must be provided via environment variables)
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# MySQL 8.0+ JDBC driver (supports modern MySQL features)
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ================================
# == Connection Pool (HikariCP) ==
# ================================

# Maximum number of connections in the pool (default: 20)
# Recommended: 10-30 for most applications
spring.datasource.hikari.maximum-pool-size=${DB_POOL_MAX_SIZE:20}

# Minimum number of idle connections maintained in the pool (default: 5)
# Should be less than maximum-pool-size
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:5}

# Maximum time (in milliseconds) a connection can remain idle before being closed (default: 300000 = 5 minutes)
# Helps prevent connection timeouts from database server
spring.datasource.hikari.idle-timeout=${DB_POOL_IDLE_TIMEOUT:300000}

# Maximum time (in milliseconds) to wait for a connection from the pool (default: 20000 = 20 seconds)
# Should be less than any request timeout
spring.datasource.hikari.connection-timeout=${DB_POOL_CONNECTION_TIMEOUT:20000}

# Maximum lifetime (in milliseconds) of a connection in the pool (default: 1800000 = 30 minutes)
# Should be shorter than database's connection timeout
spring.datasource.hikari.max-lifetime=${DB_POOL_MAX_LIFETIME:1800000}

# Time (in milliseconds) after which a connection leak is suspected (default: 60000 = 1 minute)
# Helps detect connections that aren't properly closed
spring.datasource.hikari.leak-detection-threshold=${DB_POOL_LEAK_DETECTION:60000}

# =====================
# == JPA & Hibernate ==
# =====================

# Schema validation (recommended for production safety)
spring.jpa.hibernate.ddl-auto=validate

# Disable Open Session in View to prevent LazyInitializationException and encourage better service-layer design
spring.jpa.open-in-view=false

# Show SQL queries in logs (should be overridden in production)
spring.jpa.show-sql=true

# Format SQL output for better readability
spring.jpa.properties.hibernate.format_sql=true

# Performance optimizations for batch operations
# Batch size: Number of statements batched together before execution (default: 20)
# Higher values = better performance but more memory usage
spring.jpa.properties.hibernate.jdbc.batch_size=${JPA_BATCH_SIZE:20}

# Order inserts: Groups similar INSERT statements together for better batching
# Improves performance when inserting multiple entities
spring.jpa.properties.hibernate.order_inserts=true

# Order updates: Groups similar UPDATE statements together for better batching
# Improves performance when updating multiple entities
spring.jpa.properties.hibernate.order_updates=true

# Batch versioned data: Enables batching for entities with @Version (optimistic locking)
# Maintains performance benefits even with versioned entities
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Use modern generator mappings
spring.jpa.hibernate.use-new-id-generator-mappings=true

# Database dialect (auto-detected but explicit is better)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# =====================================================================================
# == Flyway (for schema versioning: default = disabled; enable in specific profiles) ==
# =====================================================================================

# Enable this only if using Flyway (typically true in dev/prod)
spring.flyway.enabled=false

# Location of Flyway SQL files
spring.flyway.locations=classpath:db/migration

# Flyway baseline settings
# Baseline on migrate: Creates baseline version if schema is not empty (recommended for existing databases)
# Allows Flyway to work with databases that already have data/schema
spring.flyway.baseline-on-migrate=true

# Validate on migrate: Validates applied migrations against resolved migrations
# Ensures database schema matches expected migration scripts (recommended for safety)
spring.flyway.validate-on-migrate=true

# =======================
# == JWT Configuration ==
# =======================

# A 256-bit Base64-encoded secret key used to sign and verify JWT tokens
# You can generate one at: https://generate.plus/en/base64 (choose "length in bytes" = 32)
app.jwt.secret=${APP_JWT_SECRET}

# JWT expiration time in milliseconds (default: 24 hours)
app.jwt.expiration=${APP_JWT_EXPIRATION:86400000}

# Refresh token expiration (default: 7 days)
app.jwt.refresh-expiration=${APP_JWT_REFRESH_EXPIRATION:604800000}

# JWT issuer
app.jwt.issuer=${APP_JWT_ISSUER:bookreviewhub-backend}

# =====================================================
# == CORS Configuration (Allow origins for frontend) ==
# =====================================================

# Allowed origins for CORS requests (comma-separated for multiple origins)
app.cors.allowed-origins=${ALLOWED_ORIGINS}

# Allowed methods
app.cors.allowed-methods=${ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}

# Allowed headers
app.cors.allowed-headers=${ALLOWED_HEADERS:*}

# Allow credentials
app.cors.allow-credentials=${ALLOW_CREDENTIALS:true}

# Max age for preflight requests (in seconds)
app.cors.max-age=${CORS_MAX_AGE:3600}

# ==============================
# == Cloudinary Configuration ==
# ==============================

# Cloudinary cloud name: used to identify your Cloudinary account
app.cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME}

# Cloudinary API key: used for authentication with Cloudinary
app.cloudinary.api-key=${CLOUDINARY_API_KEY}

# Cloudinary API secret: used for secure operations with Cloudinary
app.cloudinary.api-secret=${CLOUDINARY_API_SECRET}

# Cloudinary environment name (used to separate folders by dev/staging/prod)
app.cloudinary.environment=${CLOUDINARY_ENVIRONMENT}

# Upload timeout (in seconds)
app.cloudinary.upload-timeout=${CLOUDINARY_UPLOAD_TIMEOUT:60}

# ===============================
# == Cloudinary Avatar Uploads ==
# ===============================

# Local file path for the default avatar in resources (do not change)
app.cloudinary.avatar.local-default-path=${CLOUDINARY_AVATAR_LOCAL_DEFAULT_PATH}

# Cloudinary folder to store static default avatars
app.cloudinary.avatar.static-folder=book-review-hub/${spring.profiles.active}/assets/avatars

# Public ID for the static default avatar image (used for public access)
app.cloudinary.avatar.static-public-id=${CLOUDINARY_AVATAR_STATIC_PUBLIC_ID}

# Cloudinary folder prefix for account-specific avatars
app.cloudinary.avatar.account-folder-prefix=book-review-hub/${spring.profiles.active}/users/

# Avatar ID name when uploading an account's custom avatar
app.cloudinary.avatar.account-avatar-id=${CLOUDINARY_AVATAR_USER_AVATAR_ID}

# Avatar upload constraints
app.cloudinary.avatar.max-file-size=${AVATAR_MAX_FILE_SIZE:5242880}
app.cloudinary.avatar.allowed-formats=${AVATAR_ALLOWED_FORMATS:jpg,jpeg,png,webp}

# ===============================
# == File Upload Configuration ==
# ===============================

# File upload size limits (default: 10MB each)
# Max file size: Maximum size for individual uploaded files
# Prevents server overload from huge file uploads
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}

# Max request size: Maximum size for entire multipart request (including all files + form data)
# Should be equal to or larger than max-file-size
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:10MB}

# Enable multipart uploads
spring.servlet.multipart.enabled=true

# ===========================
# == Jackson Configuration ==
# ===========================

# JSON serialization behavior settings
# Write dates as timestamps: false = ISO format strings instead of numeric timestamps
# ISO format is more readable and timezone-aware
spring.jackson.serialization.write-dates-as-timestamps=false

# Indent output: Pretty-print JSON (default: false for production performance)
# Set to true in development for easier debugging
spring.jackson.serialization.indent-output=${JSON_INDENT_OUTPUT:false}

# Fail on unknown properties: false = ignore unknown JSON fields during deserialization
# Provides flexibility when API evolves (clients can send extra fields)
spring.jackson.deserialization.fail-on-unknown-properties=false

# Fail on empty beans: false = allow serialization of empty objects
# Prevents errors when serializing objects with no properties
spring.jackson.serialization.fail-on-empty-beans=false

# Date and timezone formatting for JSON
# Date format: ISO 8601 format with milliseconds and timezone (yyyy-MM-dd'T'HH:mm:ss.SSSZ)
# Standard format that works across different systems and timezones
spring.jackson.date-format=yyyy-MM-dd'T'HH:mm:ss.SSSZ

# Application timezone: Default timezone for date operations (default: UTC)
# UTC is recommended to avoid timezone-related bugs in distributed systems
spring.jackson.time-zone=${APP_TIMEZONE:UTC}

# ==========================
# == Server Configuration ==
# ==========================

# Default server port (can be overridden by environment)
server.port=${SERVER_PORT:8080}

# HTTP response compression settings
# Enable compression: Reduces bandwidth usage and improves response times
# Automatically compresses responses for supported clients
server.compression.enabled=true

# MIME types to compress: Specifies which content types should be compressed
# Focuses on text-based formats that benefit most from compression
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# Minimum response size: Only compress responses larger than this (1024 bytes = 1KB)
# Avoids compression overhead for very small responses
server.compression.min-response-size=1024

# ===========================
# == Logging Configuration ==
# ===========================

# Root logging level
logging.level.root=${LOG_LEVEL_ROOT:INFO}

# Application-specific logging
logging.level.com.bookreviewhub=${LOG_LEVEL_APP:INFO}

# Spring Security logging (useful for debugging auth issues)
logging.level.org.springframework.security=${LOG_LEVEL_SECURITY:WARN}

# Hibernate SQL logging configuration
# SQL logging: Shows the actual SQL queries being executed (default: WARN for production)
# Set to DEBUG in development to see all SQL statements
logging.level.org.hibernate.SQL=${LOG_LEVEL_SQL:WARN}

# SQL parameter logging: Shows the parameter values bound to SQL queries (default: WARN)
# Set to TRACE in development to see parameter values (sensitive data!)
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOG_LEVEL_SQL_PARAMS:WARN}

# HikariCP logging
logging.level.com.zaxxer.hikari=${LOG_LEVEL_HIKARI:WARN}

# Log pattern
logging.pattern.console=${LOG_PATTERN_CONSOLE:%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx}

# ============================
# == Actuator Configuration ==
# ============================

# Actuator endpoint configuration
# Exposed endpoints: Comma-separated list of endpoints to expose via web (default: health,info)
# Common options: health, info, metrics, prometheus, env (be careful with sensitive endpoints in production)
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info}

# Health endpoint details: Controls when to show detailed health information
# Options: never, when-authorized, always (when-authorized is recommended for security)
management.endpoint.health.show-details=${ACTUATOR_HEALTH_DETAILS:when-authorized}

# Environment info: Includes environment variables in the /info endpoint
# Useful for debugging configuration issues
management.info.env.enabled=true

# Health check indicators
# Database health check: Monitors database connectivity and performance
# Automatically included in /health endpoint
management.health.db.enabled=true

# Disk space health check: Monitors available disk space
# Alerts when disk space falls below threshold
management.health.diskspace.enabled=true

# =========================
# == Cache Configuration ==
# =========================

# Cache type (none, simple, redis, etc.)
spring.cache.type=${CACHE_TYPE:simple}

# Cache names
spring.cache.cache-names=${CACHE_NAMES:books,users,reviews}

# ==============================
# == Validation Configuration ==
# ==============================

# Enable validation
spring.validation.enabled=true

# ===============================
# == Transaction Configuration ==
# ===============================

# Transaction timeout (in seconds)
spring.transaction.default-timeout=${TRANSACTION_TIMEOUT:30}
