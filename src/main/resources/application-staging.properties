# application-staging.properties (profile: staging)
# Staging environment - Production-like configuration for pre-production testing
# This environment should mirror production as closely as possible for final validation
# Active profile should be set via runtime argument: --spring.profiles.active=staging

# =====================================================================================
# == Flyway Configuration (Staging) ==
# =====================================================================================

# Enable Flyway for staging database schema versioning
# Test migration scripts in production-like environment before prod deployment
spring.flyway.enabled=true

# Allow Flyway clean in staging for reset scenarios (use with extreme caution)
# Useful for testing migration rollbacks or fresh deployments
spring.flyway.cleanDisabled=false

# Validate migrations rigorously (same as production)
# Catch migration issues before they reach production
spring.flyway.validate-on-migrate=true
spring.flyway.validate-migration-naming=true

# Enable Flyway repair for staging (helpful when testing migrations)
# Allows fixing checksum mismatches during development
spring.flyway.repair-on-migrate=false

# Set reasonable timeout for staging migrations
spring.flyway.lock-retry-count=30

# =====================================================================================
# == JPA & Hibernate Configuration (Staging) ==
# =====================================================================================

# Use validate like production (never auto-update schema)
# Ensures staging behaves exactly like production
spring.jpa.hibernate.ddl-auto=validate

# Show SQL queries for debugging issues before production
# More verbose than production but less than development
spring.jpa.show-sql=true

# Format SQL for easier debugging in staging
spring.jpa.properties.hibernate.format_sql=true

# Enable SQL comments to trace query origins
spring.jpa.properties.hibernate.use_sql_comments=true

# Enable statistics for performance testing
# Monitor performance issues before they reach production
spring.jpa.properties.hibernate.generate_statistics=true

# Production-like batch settings
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# Enable second-level cache (test caching behavior)
spring.jpa.properties.hibernate.cache.use_second_level_cache=true
spring.jpa.properties.hibernate.cache.use_query_cache=true

# =====================================================================================
# == Logging Configuration (Staging) ==
# =====================================================================================

# Moderate logging level - more verbose than production for debugging
logging.level.root=INFO

# Application-specific logging at DEBUG level for thorough testing
# Helps catch issues that might not appear in production logs
logging.level.com.bookreviewhub=DEBUG

# Framework logging at INFO level
logging.level.org.springframework=INFO
logging.level.org.hibernate=INFO

# Show SQL queries and parameters for debugging
# More detailed than production but controlled
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Security logging for testing auth flows
logging.level.org.springframework.security=DEBUG

# Connection pool logging for performance monitoring
logging.level.com.zaxxer.hikari=INFO

# =====================================================================================
# == Error Handling (Staging) ==
# =====================================================================================

# Show some error details for debugging but not full stack traces
# Balance between debugging capability and security
server.error.include-stacktrace=on-param
server.error.include-message=always
server.error.include-binding-errors=on-param

# =====================================================================================
# == Jackson JSON Configuration (Staging) ==
# =====================================================================================

# Pretty-print JSON for easier API testing and debugging
# Makes manual testing and API exploration easier
spring.jackson.serialization.indent-output=true

# Standard JSON configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.generator.ignore-unknown=true

# =====================================================================================
# == Actuator Configuration (Staging) ==
# =====================================================================================

# Expose more endpoints than production for comprehensive testing
# Test monitoring setup before production deployment
management.endpoints.web.exposure.include=health,info,metrics,env,flyway,configprops

# Show health details for debugging infrastructure issues
management.endpoint.health.show-details=always

# Enable environment info for configuration verification
management.info.env.enabled=true

# Configure health check groups (same as production)
management.endpoint.health.group.liveness.include=ping,diskSpace
management.endpoint.health.group.readiness.include=db,flyway

# Optional: Use different management port for staging monitoring
# management.server.port=8081

# =====================================================================================
# == Connection Pool Configuration (Staging) ==
# =====================================================================================

# Production-like connection pool settings
# Test connection pool behavior under production-like load
spring.datasource.hikari.maximum-pool-size=25
spring.datasource.hikari.minimum-idle=8
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# =====================================================================================
# == Performance Configuration (Staging) ==
# =====================================================================================

# Enable compression (same as production)
server.compression.enabled=true
server.compression.min-response-size=2048

# Production-like timeouts
server.connection-timeout=20000
server.keep-alive-timeout=15000

# =====================================================================================
# == File Upload Configuration (Staging) ==
# =====================================================================================

# Production-like file upload limits
# Test file upload scenarios with production constraints
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=5MB

# Staging-specific upload location
spring.servlet.multipart.location=${UPLOAD_TEMP_DIR:/tmp/staging-uploads}

# =====================================================================================
# == Cache Configuration (Staging) ==
# =====================================================================================

# Enable caching to test cache behavior
# Same cache type as production
spring.cache.type=simple

# Test cache TTL settings
# spring.cache.redis.time-to-live=600000

# =====================================================================================
# == Security Configuration (Staging) ==
# =====================================================================================

# Enable security features but allow some debugging
# Test security configuration before production

# Session configuration (same as production)
server.servlet.session.timeout=30m
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true

# =====================================================================================
# == Monitoring & Testing (Staging) ==
# =====================================================================================

# Enable JMX for monitoring testing
spring.jmx.enabled=true

# Enable metrics collection for performance testing
management.metrics.enable.all=true

# Configure metrics export for testing monitoring integration
# management.metrics.export.prometheus.enabled=true

# =====================================================================================
# == Load Testing Configuration (Staging) ==
# =====================================================================================

# Configure for load testing scenarios
# Slightly more generous timeouts for load testing

# Transaction timeout for load testing
spring.transaction.default-timeout=45

# =====================================================================================
# == Data Configuration (Staging) ==
# =====================================================================================

# Staging should use production-like data volumes
# Consider using anonymized production data or realistic test data

# Enable SQL script execution for test data (optional)
# spring.sql.init.mode=always
# spring.sql.init.data-locations=classpath:data-staging.sql

# =====================================================================================
# == Graceful Shutdown (Staging) ==
# =====================================================================================

# Test graceful shutdown behavior
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# =====================================================================================
# == External Service Configuration (Staging) ==
# =====================================================================================

# Use staging/sandbox versions of external services
# Configure staging-specific API endpoints and credentials via environment variables

# Example: Staging-specific Cloudinary configuration
# app.cloudinary.environment=staging

# Example: Use staging payment processor endpoints
# app.payment.api.base-url=${STAGING_PAYMENT_API_URL}

# =====================================================================================
# == Staging Environment Notes ==
# =====================================================================================

# STAGING ENVIRONMENT CHECKLIST:
# 01. Use separate database (staging_db) with production-like data volume
# 02. Configure staging-specific external service endpoints (payment, email, etc.)
# 03. Use staging API keys and credentials (never production keys)
# 04. Test SSL certificates and HTTPS configuration
# 05. Verify CORS settings with staging frontend URLs
# 06. Test backup and restore procedures
# 07. Run performance and load tests
# 08. Test deployment and rollback procedures
# 09. Validate monitoring and alerting configuration
# 10. Test database migration scripts thoroughly
# 11. Verify security configurations and access controls
# 12. Test integration with CI/CD pipeline
# 13. Validate logging and log aggregation
# 14. Test disaster recovery scenarios

# STAGING DATA STRATEGY:
# - Use anonymized production data OR
# - Generate realistic test data with similar volume and complexity
# - Include edge cases and boundary conditions in test data
# - Regularly refresh staging data to catch data-related issues

# STAGING TESTING SCENARIOS:
# - Full regression testing
# - Performance and load testing
# - Security penetration testing
# - Integration testing with external services
# - Database migration testing
# - Failover and disaster recovery testing
# - User acceptance testing (UAT)